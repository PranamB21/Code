services:
  - type: web
    name: skin-tone-analyzer
    env: python
    buildCommand: |-
      set -ex
      python -m pip install --upgrade pip
      
      # Verify Python directory and skin_tone.py
      if [ ! -d "Python" ]; then
        echo "ERROR: Python directory not found"
        ls -la
        exit 1
      fi
      
      if [ ! -f "Python/skin_tone.py" ]; then
        echo "ERROR: skin_tone.py not found"
        ls -la Python/
        exit 1
      fi
      
      # Set up package structure
      rm -rf skin_tone_analyzer
      mkdir -p skin_tone_analyzer
      cp -v Python/skin_tone.py skin_tone_analyzer/skin_tone.py
      
      if [ ! -f "skin_tone_analyzer/skin_tone.py" ]; then
        echo "ERROR: Failed to copy skin_tone.py"
        ls -la skin_tone_analyzer/
        exit 1
      fi
      
      # Create __init__.py
      cat > skin_tone_analyzer/__init__.py << 'EOL'
import os
import sys
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Get the absolute path of the package directory
package_dir = os.path.dirname(os.path.abspath(__file__))
logger.info(f"Package directory: {package_dir}")

# Add package directory to Python path
if package_dir not in sys.path:
    sys.path.insert(0, package_dir)
    logger.info(f"Added {package_dir} to Python path")

try:
    from .skin_tone import process_image, detect_skin_tone, recommend_colors, create_color_preview
    logger.info("Successfully imported skin_tone module")
except ImportError as e:
    logger.error(f"Error importing from skin_tone: {e}")
    logger.error(f"Current directory: {os.getcwd()}")
    logger.error(f"Package directory: {package_dir}")
    logger.error(f"Directory contents: {os.listdir(package_dir)}")
    raise

__all__ = ['process_image', 'detect_skin_tone', 'recommend_colors', 'create_color_preview']
EOL
      
      # Set permissions
      chmod 644 skin_tone_analyzer/__init__.py
      chmod 644 skin_tone_analyzer/skin_tone.py
      
      # Install dependencies
      pip install -r requirements.txt
      pip install gunicorn==20.1.0
      
      # Verify gunicorn installation
      python -c "import gunicorn; print('Gunicorn version:', gunicorn.__version__)"
      
      # Create uploads directory
      mkdir -p uploads
      chmod 755 uploads
      
      # Verify installation
      PYTHONPATH=/opt/render/project/src python -c "
import os
import sys
print('Python path:', sys.path)
print('Current directory:', os.getcwd())
print('Directory contents:', os.listdir())
print('skin_tone_analyzer contents:', os.listdir('skin_tone_analyzer'))
from skin_tone_analyzer import process_image
print('Import successful')
"
    startCommand: PYTHONPATH=/opt/render/project/src python -m gunicorn --bind 0.0.0.0:$PORT wsgi:app
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: FLASK_ENV
        value: production
      - key: PYTHONPATH
        value: /opt/render/project/src
    buildFilter:
      paths:
      - Python/**
      - skin_tone_analyzer/**
      - requirements.txt
      - setup.py
      - wsgi.py
      - app.py
      - templates/**
      - render.yaml
    autoDeploy: true
    healthCheckPath: /
    plan: free